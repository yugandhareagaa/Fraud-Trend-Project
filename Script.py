# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SdRNv0bOly5kjYndNaR28u4gOakNOEeL
"""



from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():
  print('User uploaded file "{name}" with length {length} bytes'.format(
      name=fn, length=len(uploaded[fn])))


  import pandas as pd

# Load your data
df = pd.read_csv('synthetic_fraud_transactions_5000.csv')
display(df.head())  # Show the first few rows

from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report
import pandas as pd

# Columns that are words - need converting
text_columns = ['BankName', 'BIN', 'Location', 'DeviceID']

# Convert each text column to a number
for column in text_columns:
    df[column] = LabelEncoder().fit_transform(df[column])

# Convert Timestamp to datetime format and extract features if 'Timestamp' column exists
if 'Timestamp' in df.columns:
    df['Timestamp'] = pd.to_datetime(df['Timestamp'])
    df['Hour'] = df['Timestamp'].dt.hour
    df['DayOfWeek'] = df['Timestamp'].dt.dayofweek
    df.drop(columns=['Timestamp'], inplace=True)  # Remove timestamp column


# Define features (X) and target (y)
X = df.drop('IsFraud', axis=1)
y = df['IsFraud']

# Split into train and test sets (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


# --- Add model definition and training here ---
# Example (you can replace this with your desired model):
model = LogisticRegression(max_iter=1000) # Increased max_iter for convergence
model.fit(X_train, y_train)
# --------------------------------------------------



# Predict using the test data
y_pred = model.predict(X_test)

# Show the results
print(classification_report(y_test, y_pred))

from imblearn.over_sampling import SMOTE
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report

# Apply SMOTE to the training data
smote = SMOTE(random_state=42)
X_train_resampled, y_train_resampled = smote.fit_resample(X_train, y_train)

# Train the Logistic Regression model on the resampled data
model_resampled = LogisticRegression(max_iter=1000)
model_resampled.fit(X_train_resampled, y_train_resampled)

# Predict using the test data
y_pred_resampled = model_resampled.predict(X_test)

# Show the results
print(classification_report(y_test, y_pred_resampled))